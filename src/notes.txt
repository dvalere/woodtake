image is submitted

image goes to redis

image is placed in gallery grid

user is redirected to viewingPost

viewingPost displays the image by using usestate

imageblock objects or elements that hold viewingpage objects with the data of a post, they display the image of that post, and they’re clickable

imageBlock→viewingPage(usestate declared here)[imageForm within viewingPage]→redis

imageBlock elements can be placed on gallerypage just like it’s done in pixelary

useState in galleryPage, which goes through redis and adds new

```
    <hstack gap="small">{myDrawings}</hstack>

```

Data flow:
Landing at galllery page→guide page→image form→add to redis & update useState→viewingPost(relies on useState)

Gallery→galleryblocks(access redis, load up viewingPost page when clicked)



1. refactor form to use context.useForm
2. use post creation on form submission
3. use redis to associate post type and image with post ID
4. use data from redis to determine initial view


Post creation: 
Values are stored in redis
When whatever button is clicked, a function stores the post values into a type, and the return value of that function is inputted into a viewingPost page



AFTER FORM SUBMISSION:
-Create new "post" comment under the custom post:
    Post:
        Each comment is structured with the "viewingPost" page
        When the imageForm is submitted, a comment is made with the info
        Set enter the info into redis too, with the comment ID as the redis key
        
    Comments:
        You can click "guess" on a post and it'll open a form to enter what type of wood you think it is
        The guess will then show up on the comment of the original post as a reply
        The comments section will show upvotes and show the highest upvoted comments

Create a function that 

//ADD REDIRECTING TO THE NEW POST